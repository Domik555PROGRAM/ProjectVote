using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Microsoft.Win32;
using MySql.Data.MySqlClient;
using System.IO;
using Project_Vote.Models;
using System.Security.Cryptography;

namespace Project_Vote
{
    
    public partial class Registration : Window
    {
        private string connectionString = "Server=localhost;Port=3306;Database=voteuser;Uid=root";
        private byte[] userPhotoData;
        private bool isPasswordVisible = false;

        public Registration()
        {
            InitializeComponent();
            // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
                string resourcesDir = System.IO.Path.Combine(baseDirectory, "Resources");
                
                if (!Directory.Exists(resourcesDir))
                {
                    Directory.CreateDirectory(resourcesDir);
                }
                
                string eyeOnPath = System.IO.Path.Combine(resourcesDir, "eye_on.png");
                string eyeOffPath = System.IO.Path.Combine(resourcesDir, "eye_off.png");
                
                // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if (!File.Exists(eyeOnPath) || !File.Exists(eyeOffPath))
                {
                    TextBlock eyeIcon = new TextBlock
                    {
                        Text = "üëÅÔ∏è",
                        FontSize = 16,
                        HorizontalAlignment = HorizontalAlignment.Center,
                        VerticalAlignment = VerticalAlignment.Center
                    };
                    TogglePasswordButton.Content = eyeIcon;
                }
            }
            catch
            {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç
                TogglePasswordButton.Content = "üëÅÔ∏è";
            }
        }

        private void ClearErrors()
        {
            EmailErrorText.Visibility = Visibility.Collapsed;
            NameErrorText.Visibility = Visibility.Collapsed;
            PasswordErrorText.Visibility = Visibility.Collapsed;
            ConfirmPasswordErrorText.Visibility = Visibility.Collapsed;
        }

        private void ShowError(TextBlock errorText, string message)
        {
            errorText.Text = message;
            errorText.Visibility = Visibility.Visible;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        private void TogglePasswordButton_Click(object sender, RoutedEventArgs e)
        {
            isPasswordVisible = !isPasswordVisible;
            
            if (isPasswordVisible)
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                PasswordVisibleBox.Text = PasswordBox.Password;
                PasswordBox.Visibility = Visibility.Collapsed;
                PasswordVisibleBox.Visibility = Visibility.Visible;
                
                // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ "–≥–ª–∞–∑ –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π"
                if (PasswordVisibilityIcon != null)
                {
                    try
                    {
                        PasswordVisibilityIcon.Source = new BitmapImage(new Uri("/Resources/eye_on.png", UriKind.Relative));
                        PasswordVisibilityIcon.Opacity = 0.7;
                    }
                    catch
                    {
                        TextBlock eyeIcon = TogglePasswordButton.Content as TextBlock;
                        if (eyeIcon != null)
                        {
                            eyeIcon.Text = "üëÅÔ∏è‚Äçüó®Ô∏è";
                            eyeIcon.Foreground = new SolidColorBrush(Color.FromArgb(204, 255, 255, 255)); // #CCFFFFFF
                        }
                    }
                }
            }
            else
            {
                // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                PasswordBox.Password = PasswordVisibleBox.Text;
                PasswordVisibleBox.Visibility = Visibility.Collapsed;
                PasswordBox.Visibility = Visibility.Visible;
                
                // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ "–≥–ª–∞–∑"
                if (PasswordVisibilityIcon != null)
                {
                    try
                    {
                        PasswordVisibilityIcon.Source = new BitmapImage(new Uri("/Resources/eye_off.png", UriKind.Relative));
                        PasswordVisibilityIcon.Opacity = 0.7;
                    }
                    catch
                    {
                        TextBlock eyeIcon = TogglePasswordButton.Content as TextBlock;
                        if (eyeIcon != null)
                        {
                            eyeIcon.Text = "üëÅÔ∏è";
                            eyeIcon.Foreground = new SolidColorBrush(Color.FromArgb(204, 255, 255, 255)); // #CCFFFFFF
                        }
                    }
                }
            }
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            if (isPasswordVisible)
                PasswordVisibleBox.Focus();
            else
                PasswordBox.Focus();
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∏–¥–∏–º—ã–º –∏ —Å–∫—Ä—ã—Ç—ã–º –ø–æ–ª–µ–º –ø–∞—Ä–æ–ª—è
        private void PasswordBox_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (!isPasswordVisible)
            {
                PasswordVisibleBox.Text = PasswordBox.Password;
                ValidatePassword(PasswordBox.Password);
            }
        }
        
        private void PasswordVisibleBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (isPasswordVisible)
            {
                PasswordBox.Password = PasswordVisibleBox.Text;
                ValidatePassword(PasswordVisibleBox.Text);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é
        private void ValidatePassword(string password)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            bool hasLatinLetters = Regex.IsMatch(password, "[a-z]") && Regex.IsMatch(password, "[A-Z]");
            LatinLettersCheck.Visibility = hasLatinLetters ? Visibility.Visible : Visibility.Collapsed;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
            bool hasDigitsOrSymbols = Regex.IsMatch(password, "[0-9]") || Regex.IsMatch(password, "[!@#$%^&*(),.?\":{}|<>]");
            DigitsSymbolsCheck.Visibility = hasDigitsOrSymbols ? Visibility.Visible : Visibility.Collapsed;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
            bool hasMinLength = password.Length >= 8;
            LengthCheck.Visibility = hasMinLength ? Visibility.Visible : Visibility.Collapsed;
        }

        private bool CheckEmailExists(string email, MySqlConnection connection)
        {
            string checkQuery = "SELECT COUNT(*) FROM users WHERE email = @email";
            using (MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection))
            {
                checkCmd.Parameters.AddWithValue("@email", email);
                int userCount = Convert.ToInt32(checkCmd.ExecuteScalar());
                return userCount > 0;
            }
        }

        private bool CheckNameExists(string name, MySqlConnection connection)
        {
            string checkQuery = "SELECT COUNT(*) FROM users WHERE name = @name";
            using (MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection))
            {
                checkCmd.Parameters.AddWithValue("@name", name);
                int userCount = Convert.ToInt32(checkCmd.ExecuteScalar());
                return userCount > 0;
            }
        }

        private bool CreateTableIfNotExists(MySqlConnection connection)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
                string checkTableQuery = "SHOW TABLES LIKE 'users'";
                using (MySqlCommand cmd = new MySqlCommand(checkTableQuery, connection))
                {
                    object result = cmd.ExecuteScalar();
                    if (result == null)
                    {
                        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                        string createTableQuery = @"
                            CREATE TABLE users (
                                id INT AUTO_INCREMENT PRIMARY KEY,
                                email VARCHAR(255) NOT NULL UNIQUE,
                                name VARCHAR(16) NOT NULL UNIQUE,
                                password VARCHAR(255) NOT NULL,
                                photo LONGBLOB
                            )";
                        using (MySqlCommand createCmd = new MySqlCommand(createTableQuery, connection))
                        {
                            createCmd.ExecuteNonQuery();
                        }
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                ShowError(EmailErrorText, $"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
                return false;
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SHA-256
        private string HashPassword(string password)
        {
            using (SHA256 sha256 = SHA256.Create())
            {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–æ–ª—å –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤
                byte[] bytes = Encoding.UTF8.GetBytes(password);
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à SHA-256
                byte[] hash = sha256.ComputeHash(bytes);
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < hash.Length; i++)
                {
                    builder.Append(hash[i].ToString("x2"));
                }
                
                return builder.ToString();
            }
        }

        private bool SaveUserToDatabase(string email, string name, string password, byte[] photo)
        {
            try
            {
                using (MySqlConnection conn = new MySqlConnection(connectionString))
                {
                    conn.Open();

                    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (!CreateTableIfNotExists(conn))
                    {
                        return false;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
                    if (CheckEmailExists(email, conn))
                    {
                        ShowError(EmailErrorText, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                        return false;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                    if (CheckNameExists(name, conn))
                    {
                        ShowError(NameErrorText, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                        return false;
                    }

                    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                    string hashedPassword = HashPassword(password);

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    string insertQuery = "INSERT INTO users (email, name, password, photo) VALUES (@email, @name, @password, @photo)";
                    using (MySqlCommand cmd = new MySqlCommand(insertQuery, conn))
                    {
                        cmd.Parameters.AddWithValue("@email", email);
                        cmd.Parameters.AddWithValue("@name", name);
                        cmd.Parameters.AddWithValue("@password", hashedPassword); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                        cmd.Parameters.AddWithValue("@photo", photo);

                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                ShowError(EmailErrorText, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
                return false;
            }
        }

        private void RegisterButton_Click(object sender, RoutedEventArgs e)
        {
            ClearErrors();
            bool hasErrors = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Email
            if (string.IsNullOrWhiteSpace(EmailTextBox.Text))
            {
                ShowError(EmailErrorText, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email");
                EmailTextBox.Focus();
                hasErrors = true;
                return;
            }

            if (!EmailTextBox.Text.Contains("@") || !EmailTextBox.Text.Contains("."))
            {
                ShowError(EmailErrorText, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                EmailTextBox.Focus();
                hasErrors = true;
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–º—è
            if (string.IsNullOrWhiteSpace(NameTextBox.Text))
            {
                ShowError(NameErrorText, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è");
                NameTextBox.Focus();
                hasErrors = true;
                return;
            }

            if (NameTextBox.Text.Length < 2)
            {
                ShowError(NameErrorText, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞");
                NameTextBox.Focus();
                hasErrors = true;
                return;
            }

            if (NameTextBox.Text.Length > 16)
            {
                ShowError(NameErrorText, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤");
                NameTextBox.Focus();
                hasErrors = true;
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–∞—Ä–æ–ª—å
            string password = isPasswordVisible ? PasswordVisibleBox.Text : PasswordBox.Password;
            
            if (string.IsNullOrWhiteSpace(password))
            {
                ShowError(PasswordErrorText, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å");
                if (isPasswordVisible)
                    PasswordVisibleBox.Focus();
                else
                    PasswordBox.Focus();
                hasErrors = true;
                return;
            }

            if (password.Length < 8)
            {
                ShowError(PasswordErrorText, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
                if (isPasswordVisible)
                    PasswordVisibleBox.Focus();
                else
                    PasswordBox.Focus();
                hasErrors = true;
                return;
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞—Ä–æ–ª—é
            bool hasLatinLetters = Regex.IsMatch(password, "[a-z]") && Regex.IsMatch(password, "[A-Z]");
            bool hasDigitsOrSymbols = Regex.IsMatch(password, "[0-9]") || Regex.IsMatch(password, "[!@#$%^&*(),.?\":{}|<>]");
            
            if (!hasLatinLetters || !hasDigitsOrSymbols)
            {
                ShowError(PasswordErrorText, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã");
                if (isPasswordVisible)
                    PasswordVisibleBox.Focus();
                else
                    PasswordBox.Focus();
                hasErrors = true;
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            if (string.IsNullOrWhiteSpace(ConfirmPasswordBox.Password))
            {
                ShowError(ConfirmPasswordErrorText, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å");
                ConfirmPasswordBox.Focus();
                hasErrors = true;
                return;
            }

            if (password != ConfirmPasswordBox.Password)
            {
                ShowError(ConfirmPasswordErrorText, "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                ConfirmPasswordBox.Focus();
                hasErrors = true;
                return;
            }

            if (!hasErrors)
            {
                if (SaveUserToDatabase(EmailTextBox.Text, NameTextBox.Text, password, userPhotoData))
                { 
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CurrentUser
                    using (MySqlConnection conn = new MySqlConnection(connectionString))
                    {
                        conn.Open();
                        string query = "SELECT id FROM users WHERE email = @email";
                        using (MySqlCommand cmd = new MySqlCommand(query, conn))
                        {
                            cmd.Parameters.AddWithValue("@email", EmailTextBox.Text);
                            int userId = Convert.ToInt32(cmd.ExecuteScalar());
                            
                            CurrentUser.UserId = userId;
                            CurrentUser.Email = EmailTextBox.Text;
                            CurrentUser.Name = NameTextBox.Text;
                            CurrentUser.Photo = userPhotoData;
                        }
                    }

                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    DialogResult = true;
                    Close();
                }
            }
        }

        private void UploadPhoto_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è|*.jpg;*.jpeg;*.png;*.gif;*.bmp";
            openFileDialog.Title = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è";

            if (openFileDialog.ShowDialog() == true)
            {
                try
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π BitmapImage –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    BitmapImage bitmap = new BitmapImage();
                    bitmap.BeginInit();
                    bitmap.UriSource = new Uri(openFileDialog.FileName);
                    bitmap.CacheOption = BitmapCacheOption.OnLoad;
                    bitmap.EndInit();
                    bitmap.Freeze();

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤
                    JpegBitmapEncoder encoder = new JpegBitmapEncoder();
                    encoder.Frames.Add(BitmapFrame.Create(bitmap));
                    using (MemoryStream ms = new MemoryStream())
                    {
                        encoder.Save(ms);
                        userPhotoData = ms.ToArray();
                    }

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ImageBrush
                    ProfileImageBrush.ImageSource = bitmap;
                }
                catch (Exception ex)
                {
                    ShowError(NameErrorText, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {ex.Message}");
                }
            }
        }
    }
}
